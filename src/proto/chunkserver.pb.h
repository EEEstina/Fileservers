// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunkserver.proto

#ifndef PROTOBUF_INCLUDED_chunkserver_2eproto
#define PROTOBUF_INCLUDED_chunkserver_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chunkserver_2eproto 

namespace protobuf_chunkserver_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chunkserver_2eproto
namespace goya {
namespace fs {
class WriteBlockRequest;
class WriteBlockRequestDefaultTypeInternal;
extern WriteBlockRequestDefaultTypeInternal _WriteBlockRequest_default_instance_;
class WriteBlockResponse;
class WriteBlockResponseDefaultTypeInternal;
extern WriteBlockResponseDefaultTypeInternal _WriteBlockResponse_default_instance_;
}  // namespace fs
}  // namespace goya
namespace google {
namespace protobuf {
template<> ::goya::fs::WriteBlockRequest* Arena::CreateMaybeMessage<::goya::fs::WriteBlockRequest>(Arena*);
template<> ::goya::fs::WriteBlockResponse* Arena::CreateMaybeMessage<::goya::fs::WriteBlockResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace goya {
namespace fs {

// ===================================================================

class WriteBlockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goya.fs.WriteBlockRequest) */ {
 public:
  WriteBlockRequest();
  virtual ~WriteBlockRequest();

  WriteBlockRequest(const WriteBlockRequest& from);

  inline WriteBlockRequest& operator=(const WriteBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteBlockRequest(WriteBlockRequest&& from) noexcept
    : WriteBlockRequest() {
    *this = ::std::move(from);
  }

  inline WriteBlockRequest& operator=(WriteBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteBlockRequest* internal_default_instance() {
    return reinterpret_cast<const WriteBlockRequest*>(
               &_WriteBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WriteBlockRequest* other);
  friend void swap(WriteBlockRequest& a, WriteBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteBlockRequest* New() const final {
    return CreateMaybeMessage<WriteBlockRequest>(NULL);
  }

  WriteBlockRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteBlockRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteBlockRequest& from);
  void MergeFrom(const WriteBlockRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteBlockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 sequence_id = 1;
  void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 1;
  ::google::protobuf::uint64 sequence_id() const;
  void set_sequence_id(::google::protobuf::uint64 value);

  // int64 block_id = 2;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 2;
  ::google::protobuf::int64 block_id() const;
  void set_block_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:goya.fs.WriteBlockRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 sequence_id_;
  ::google::protobuf::int64 block_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteBlockResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goya.fs.WriteBlockResponse) */ {
 public:
  WriteBlockResponse();
  virtual ~WriteBlockResponse();

  WriteBlockResponse(const WriteBlockResponse& from);

  inline WriteBlockResponse& operator=(const WriteBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteBlockResponse(WriteBlockResponse&& from) noexcept
    : WriteBlockResponse() {
    *this = ::std::move(from);
  }

  inline WriteBlockResponse& operator=(WriteBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteBlockResponse* internal_default_instance() {
    return reinterpret_cast<const WriteBlockResponse*>(
               &_WriteBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(WriteBlockResponse* other);
  friend void swap(WriteBlockResponse& a, WriteBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteBlockResponse* New() const final {
    return CreateMaybeMessage<WriteBlockResponse>(NULL);
  }

  WriteBlockResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteBlockResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteBlockResponse& from);
  void MergeFrom(const WriteBlockResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteBlockResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 sequence_id = 1;
  void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 1;
  ::google::protobuf::uint64 sequence_id() const;
  void set_sequence_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:goya.fs.WriteBlockResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 sequence_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkserver_2eproto::TableStruct;
};
// ===================================================================

class ChunkServer_Stub;

class ChunkServer : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ChunkServer() {};
 public:
  virtual ~ChunkServer();

  typedef ChunkServer_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void WriteBlock(::google::protobuf::RpcController* controller,
                       const ::goya::fs::WriteBlockRequest* request,
                       ::goya::fs::WriteBlockResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChunkServer);
};

class ChunkServer_Stub : public ChunkServer {
 public:
  ChunkServer_Stub(::google::protobuf::RpcChannel* channel);
  ChunkServer_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ChunkServer_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ChunkServer ------------------------------------------

  void WriteBlock(::google::protobuf::RpcController* controller,
                       const ::goya::fs::WriteBlockRequest* request,
                       ::goya::fs::WriteBlockResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChunkServer_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WriteBlockRequest

// uint64 sequence_id = 1;
inline void WriteBlockRequest::clear_sequence_id() {
  sequence_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WriteBlockRequest::sequence_id() const {
  // @@protoc_insertion_point(field_get:goya.fs.WriteBlockRequest.sequence_id)
  return sequence_id_;
}
inline void WriteBlockRequest::set_sequence_id(::google::protobuf::uint64 value) {
  
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:goya.fs.WriteBlockRequest.sequence_id)
}

// int64 block_id = 2;
inline void WriteBlockRequest::clear_block_id() {
  block_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WriteBlockRequest::block_id() const {
  // @@protoc_insertion_point(field_get:goya.fs.WriteBlockRequest.block_id)
  return block_id_;
}
inline void WriteBlockRequest::set_block_id(::google::protobuf::int64 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:goya.fs.WriteBlockRequest.block_id)
}

// -------------------------------------------------------------------

// WriteBlockResponse

// uint64 sequence_id = 1;
inline void WriteBlockResponse::clear_sequence_id() {
  sequence_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WriteBlockResponse::sequence_id() const {
  // @@protoc_insertion_point(field_get:goya.fs.WriteBlockResponse.sequence_id)
  return sequence_id_;
}
inline void WriteBlockResponse::set_sequence_id(::google::protobuf::uint64 value) {
  
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:goya.fs.WriteBlockResponse.sequence_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fs
}  // namespace goya

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chunkserver_2eproto
